{"version":3,"file":"react-swipeable-drawer.preact.umd.min.js","sources":["../src/DrawerContainer.js","../src/DrawerOverlay.js","../src/DrawerContentContainer.js","../src/Drawer.js","../src/MainContentContainer.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { DrawerOverlay, DrawerContentContainer } from \"./Drawer\";\n\nconst DrawerContainer = ({\n  position,\n  size,\n  swiping,\n  translation,\n  toggleDrawer,\n  handleTouchStart,\n  handleTouchMove,\n  handleTouchEnd,\n  drawerContent,\n  overlayStyle,\n  contentStyle,\n}) => {\n  const open = translation > 0;\n\n  return (\n    <div className=\"DrawerContainer\">\n      <DrawerOverlay\n        position={position}\n        open={open}\n        swiping={swiping}\n        translation={translation}\n        toggleDrawer={toggleDrawer}\n        handleTouchStart={handleTouchStart}\n        handleTouchMove={handleTouchMove}\n        handleTouchEnd={handleTouchEnd}\n        style={overlayStyle}\n      />\n      <DrawerContentContainer\n        position={position}\n        size={size}\n        swiping={swiping}\n        translation={translation}\n        toggleDrawer={toggleDrawer}\n        handleTouchStart={handleTouchStart}\n        handleTouchMove={handleTouchMove}\n        handleTouchEnd={handleTouchEnd}\n        drawerContent={drawerContent}\n        style={contentStyle}\n      />\n    </div>\n  );\n};\n\nexport default DrawerContainer;\n\nDrawerContainer.propTypes = {\n  position: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]).isRequired,\n  size: PropTypes.number.isRequired,\n  swiping: PropTypes.bool.isRequired,\n  translation: PropTypes.number.isRequired,\n  toggleDrawer: PropTypes.func.isRequired,\n  handleTouchStart: PropTypes.func.isRequired,\n  handleTouchMove: PropTypes.func.isRequired,\n  handleTouchEnd: PropTypes.func.isRequired,\n  drawerContent: PropTypes.element.isRequired,\n  overlayStyle: PropTypes.object,\n  contentStyle: PropTypes.object,\n};\n\nDrawerContainer.defaultProps = {\n  overlayStyle: {},\n  contentStyle: {},\n};\n","/* eslint jsx-a11y/click-events-have-key-events: 0 */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst transform = ({ position, swiping, open }) => {\n  switch (position) {\n    case \"top\":\n      return {\n        top: 0,\n        left: 0,\n        right: 0,\n        height: swiping || open ? \"100%\" : \"20px\",\n      };\n    case \"right\":\n      return {\n        right: 0,\n        top: 0,\n        bottom: 0,\n        width: swiping || open ? \"100%\" : \"20px\",\n      };\n    case \"bottom\":\n      return {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        height: swiping || open ? \"100%\" : \"20px\",\n      };\n    case \"left\":\n    default:\n      return {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: swiping || open ? \"100%\" : \"20px\",\n      };\n  }\n};\n\nconst transition = ({ swiping, open }) => {\n  if (swiping) {\n    return \"\";\n  } else if (open) {\n    return \"background-color .2s ease-in-out, width 0s 0s, height 0s 0s\";\n  }\n  return \"background-color .2s ease-in-out, width 0s .2s, height 0s 0s\";\n};\n\nconst DrawerOverlay = ({\n  position,\n  open,\n  swiping,\n  translation,\n  toggleDrawer,\n  handleTouchStart,\n  handleTouchMove,\n  handleTouchEnd,\n  style,\n}) => (\n  <div\n    className=\"DrawerOverlay\"\n    onClick={open ? toggleDrawer : null}\n    onTouchStart={handleTouchStart}\n    onTouchMove={handleTouchMove(100)}\n    onTouchEnd={handleTouchEnd}\n    style={{\n      position: \"fixed\",\n      zIndex: 1,\n      backgroundColor: `rgba(0,0,0,${0.6 * translation / 100})`,\n      transition: transition({ swiping, open }),\n      ...transform({ position, swiping, open }),\n      ...style,\n    }}\n  />\n);\n\nexport default DrawerOverlay;\n\nDrawerOverlay.propTypes = {\n  position: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]).isRequired,\n  open: PropTypes.bool.isRequired,\n  swiping: PropTypes.bool.isRequired,\n  translation: PropTypes.number.isRequired,\n  toggleDrawer: PropTypes.func.isRequired,\n  handleTouchStart: PropTypes.func.isRequired,\n  handleTouchMove: PropTypes.func.isRequired,\n  handleTouchEnd: PropTypes.func.isRequired,\n  style: PropTypes.object.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst transform = ({ position, size, translation }) => {\n  switch (position) {\n    case \"top\":\n      return {\n        left: 0,\n        right: 0,\n        top: `-${size}%`,\n        height: `${size}%`,\n        transform: `translateY(${translation}%)`,\n      };\n    case \"right\":\n      return {\n        top: 0,\n        bottom: 0,\n        right: `-${size}%`,\n        width: `${size}%`,\n        transform: `translateX(${-translation}%)`,\n      };\n    case \"bottom\":\n      return {\n        left: 0,\n        right: 0,\n        bottom: `-${size}%`,\n        height: `${size}%`,\n        transform: `translateY(${-translation}%)`,\n      };\n    case \"left\":\n    default:\n      return {\n        top: 0,\n        bottom: 0,\n        left: `-${size}%`,\n        width: `${size}%`,\n        transform: `translateX(${translation}%)`,\n      };\n  }\n};\n\nconst DrawerContentContainer = ({\n  position,\n  size,\n  swiping,\n  translation,\n  handleTouchStart,\n  handleTouchMove,\n  handleTouchEnd,\n  drawerContent,\n  style,\n}) => (\n  <div\n    className=\"DrawerContentContainer\"\n    onTouchStart={handleTouchStart}\n    onTouchMove={handleTouchMove(size)}\n    onTouchEnd={handleTouchEnd}\n    style={{\n      position: \"fixed\",\n      zIndex: 1,\n      transition: swiping ? \"\" : \"transform .2s ease-in-out\",\n      ...transform({ position, size, translation }),\n      ...style,\n    }}\n  >\n    {drawerContent}\n  </div>\n);\n\nexport default DrawerContentContainer;\n\nDrawerContentContainer.propTypes = {\n  position: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]).isRequired,\n  size: PropTypes.number.isRequired,\n  swiping: PropTypes.bool.isRequired,\n  translation: PropTypes.number.isRequired,\n  handleTouchStart: PropTypes.func.isRequired,\n  handleTouchMove: PropTypes.func.isRequired,\n  handleTouchEnd: PropTypes.func.isRequired,\n  drawerContent: PropTypes.element.isRequired,\n  style: PropTypes.object.isRequired,\n};\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst START_TRANSLATION = -10;\nconst STOP_TRANSLATION = 100;\n\nclass Drawer extends Component {\n  static propTypes = {\n    position: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]).isRequired,\n    size: PropTypes.number.isRequired,\n    children: PropTypes.func.isRequired,\n  };\n\n  state = {\n    swiping: false,\n    scrolling: false,\n    translation: START_TRANSLATION,\n    clientX: 0,\n    clientY: 0,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { translation } = this.state;\n    if (\n      translation !== prevState.translation &&\n      translation === START_TRANSLATION\n    ) {\n      window.scrollTo(0, this.mainContentScroll);\n    }\n  }\n\n  mainContentScroll = 0;\n\n  saveScrollPosition = () => {\n    const { translation } = this.state;\n    if (translation === START_TRANSLATION) {\n      this.mainContentScroll = window.pageYOffset;\n    }\n  };\n\n  toggleDrawer = () => {\n    this.saveScrollPosition();\n    this.setState(({ translation }) => ({\n      translation: translation > 50 ? START_TRANSLATION : STOP_TRANSLATION,\n    }));\n  };\n\n  handleTouchStart = event => {\n    this.saveScrollPosition();\n    const { clientX, clientY } = event.targetTouches[0];\n    this.setState({ swiping: true, clientX, clientY });\n  };\n\n  handleTouchMove = size => event => {\n    const { position } = this.props;\n    const {\n      clientX: prevClientX,\n      clientY: prevClientY,\n      scrolling,\n    } = this.state;\n\n    const maxWidth = window.innerWidth;\n    const { clientX, clientY } = event.targetTouches[0];\n\n    const diffTranslateX = Math.abs(clientX - prevClientX);\n    const diffTranslateY = Math.abs(clientY - prevClientY);\n\n    if (scrolling || diffTranslateY > diffTranslateX) {\n      this.setState({ scrolling: true });\n    } else if (position === \"right\") {\n      this.setState({\n        translation: Math.min(\n          (maxWidth - clientX) / (maxWidth * size / 100) * 100,\n          STOP_TRANSLATION\n        ),\n      });\n    } else {\n      this.setState({\n        translation: Math.min(\n          clientX / (maxWidth * size / 100) * 100,\n          STOP_TRANSLATION\n        ),\n      });\n    }\n  };\n\n  handleTouchEnd = () => {\n    this.setState(({ translation }) => ({\n      swiping: false,\n      scrolling: false,\n      translation: translation < 50 ? START_TRANSLATION : STOP_TRANSLATION,\n    }));\n  };\n\n  render() {\n    const { position, size, children } = this.props;\n    const { swiping, translation } = this.state;\n\n    return children({\n      position,\n      size,\n      swiping,\n      translation,\n      mainContentScroll: this.mainContentScroll,\n      toggleDrawer: this.toggleDrawer,\n      handleTouchStart: this.handleTouchStart,\n      handleTouchMove: this.handleTouchMove,\n      handleTouchEnd: this.handleTouchEnd,\n    });\n  }\n}\n\nexport default Drawer;\n\nexport { default as DrawerContainer } from \"./DrawerContainer\";\nexport { default as DrawerOverlay } from \"./DrawerOverlay\";\nexport { default as DrawerContentContainer } from \"./DrawerContentContainer\";\nexport { default as MainContentContainer } from \"./MainContentContainer\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst MainContentContainer = ({ translation, mainContentScroll, children }) => {\n  const mainContentOpenStyle =\n    translation > 0\n      ? {\n          position: \"fixed\",\n          top: -mainContentScroll,\n          left: 0,\n          right: 0,\n        }\n      : {};\n\n  return (\n    <div className=\"MainContentContainer\" style={{ ...mainContentOpenStyle }}>\n      {children}\n    </div>\n  );\n};\n\nexport default MainContentContainer;\n\nMainContentContainer.propTypes = {\n  translation: PropTypes.number.isRequired,\n  mainContentScroll: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n};\n"],"names":["DrawerContainer","position","size","swiping","translation","toggleDrawer","handleTouchStart","handleTouchMove","handleTouchEnd","drawerContent","overlayStyle","contentStyle","h","className","DrawerOverlay","DrawerContentContainer","defaultProps","open","style","transition","transform","START_TRANSLATION","STOP_TRANSLATION","Drawer","state","mainContentScroll","saveScrollPosition","_this","window","pageYOffset","setState","event","targetTouches","clientX","clientY","props","prevClientX","prevClientY","scrolling","maxWidth","innerWidth","diffTranslateX","Math","abs","diffTranslateY","min","Component","prevProps","prevState","this","scrollTo","children"],"mappings":"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"}